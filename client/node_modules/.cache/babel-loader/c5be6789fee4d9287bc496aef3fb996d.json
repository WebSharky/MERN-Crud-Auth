{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport postsService from \"./postsService\";\nconst initialState = {\n  posts: [],\n  userPosts: [],\n  status: 'idle',\n  error: null,\n  createPostStatus: 'idle'\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (_, thunkAPI) => {\n  try {\n    return await postsService.getAllPosts();\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (postData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().users.user.token;\n    return await postsService.createPost(postData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const fetchPostsByUser = createAsyncThunk('posts/fetchPostsByUser', async (req, res, thunkAPI) => {\n  const {\n    nickname\n  } = req.params;\n\n  try {\n    return await postsService.getPostsByUser(nickname);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // spróbuj wykasować post added\n    postAdded: {\n      reducer(state, action) {\n        console.log(action.payload);\n        state.posts.concat([action.payload]);\n      },\n\n      prepare(title, text, image, author) {\n        return {\n          payload: {\n            _id: nanoid(),\n            title,\n            text,\n            author,\n            image,\n            createdAt: new Date().toISOString()\n          }\n        };\n      }\n\n    }\n  },\n\n  extraReducers(builder) {\n    builder //fetchPosts\n    .addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const loadedPosts = action.payload;\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }) //addNewPost\n    .addCase(addNewPost.pending, (state, action) => {\n      state.createPostStatus = 'loading';\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      state.createPostStatus = 'succeed';\n      state.posts.push(action.payload);\n    }).addCase(addNewPost.rejected, (state, action) => {\n      state.createPostStatus = 'failed';\n      state.error = action.error.message;\n    }) //fetchPostsByUser\n    .addCase(fetchPostsByUser.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPostsByUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.userPosts = action.payload;\n    }).addCase(fetchPostsByUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectAllPostsOfUser = state => state.posts.userPosts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","postsService","initialState","posts","userPosts","status","error","createPostStatus","fetchPosts","_","thunkAPI","getAllPosts","message","response","data","toString","rejectWithValue","addNewPost","postData","token","getState","users","user","createPost","fetchPostsByUser","req","res","nickname","params","getPostsByUser","postsSlice","name","reducers","postAdded","reducer","state","action","console","log","payload","concat","prepare","title","text","image","author","_id","createdAt","Date","toISOString","extraReducers","builder","addCase","pending","fulfilled","loadedPosts","rejected","push","selectAllPosts","selectAllPostsOfUser","getPostsStatus","getPostsError","actions"],"sources":["F:/PROJEKTY WWW/MERN_15/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport postsService from \"./postsService\";\r\n\r\n\r\nconst initialState = {\r\n   posts: [],\r\n   userPosts: [],\r\n   status: 'idle',\r\n   error: null,\r\n   createPostStatus: 'idle'\r\n}\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n    'posts/fetchPosts', \r\n    async (_, thunkAPI) => {\r\n    try {\r\n        return await postsService.getAllPosts()\r\n    } catch (error) {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n      }\r\n})\r\n\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n    'posts/addNewPost',\r\n    async (postData, thunkAPI) => { \r\n      try {\r\n        const token = thunkAPI.getState().users.user.token\r\n        return await postsService.createPost(postData, token)\r\n      } catch (error) {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n      }\r\n    }\r\n  )\r\n\r\n  export const fetchPostsByUser = createAsyncThunk(\r\n    'posts/fetchPostsByUser',\r\n    async (req, res, thunkAPI) => { \r\n        const { nickname } = req.params \r\n      try {\r\n        return await postsService.getPostsByUser(nickname)\r\n      } catch (error) {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n      }\r\n    }\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        // spróbuj wykasować post added\r\n        postAdded: {\r\n            reducer(state, action) {\r\n                console.log(action.payload)\r\n                state.posts.concat([action.payload])\r\n                },\r\n            prepare(title, text, image, author) {\r\n                return {\r\n                    payload: {\r\n                    _id: nanoid(),\r\n                    title,\r\n                    text,\r\n                    author,\r\n                    image,\r\n                    createdAt: new Date().toISOString()               \r\n                }\r\n                }\r\n            }\r\n        },\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            //fetchPosts\r\n            .addCase(fetchPosts.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchPosts.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'\r\n                \r\n                const loadedPosts = action.payload\r\n                state.posts = state.posts.concat(loadedPosts)\r\n            })\r\n            .addCase(fetchPosts.rejected, (state, action) => {\r\n                state.status = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n            //addNewPost\r\n            .addCase(addNewPost.pending, (state, action) => {\r\n                state.createPostStatus = 'loading'\r\n                \r\n            })\r\n            .addCase(addNewPost.fulfilled, (state, action) => {\r\n                state.createPostStatus = 'succeed'\r\n                \r\n               \r\n                    state.posts.push(action.payload)\r\n            })\r\n            .addCase(addNewPost.rejected, (state, action) => {\r\n                state.createPostStatus = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n            //fetchPostsByUser\r\n            .addCase(fetchPostsByUser.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchPostsByUser.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'\r\n                state.userPosts = action.payload\r\n            })\r\n            .addCase(fetchPostsByUser.rejected, (state, action) => {\r\n                state.status = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n})\r\n\r\nexport const selectAllPosts = (state) => state.posts.posts\r\nexport const selectAllPostsOfUser = (state) => state.posts.userPosts\r\nexport const getPostsStatus = (state) => state.posts.status\r\nexport const getPostsError = (state) => state.posts.error\r\n\r\nexport const {postAdded} = postsSlice.actions\r\n\r\nexport default postsSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}