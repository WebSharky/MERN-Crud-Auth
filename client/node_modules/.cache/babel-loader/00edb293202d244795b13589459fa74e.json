{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nimport postsService from \"./postsService\";\nconst POSTS_URL = 'http://localhost:5000/api/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null,\n  createPostStatus: 'idle'\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axios.get(POSTS_URL);\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    return error.message;\n  }\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (postData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().users.user.token;\n    return await postsService.createPost(postData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n\n  // reducers: {\n  // postAdded: {\n  //     reducer(state, action) {\n  //      \n  //         state.posts.concat([action.payload])\n  //         },\n  //     prepare(title, text, image, author) {\n  //         return {\n  //             payload: {\n  //             _id: nanoid(),\n  //             title,\n  //             text,\n  //             author,\n  //             image,\n  //             createdAt: new Date().toISOString()               \n  //             }\n  //         }\n  //     }\n  // },\n  // },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const loadedPosts = action.payload.map(post => {\n        post.myMessage = `to moja wiadomość z ${new Date()}`;\n        return post;\n      });\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.pending, (state, action) => {\n      state.createPostStatus = 'loading';\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      state.createPostStatus = 'succeed';\n      const post = action.payload;\n      state.posts.push(post.unwrap()); // console.log(action.payload)\n      // state.posts.push({\n      //     title: 'tytul',\n      //     text: 'text',\n      //     image: 'img',\n      //     author: 'author',\n      //     _id: 'id',\n      //     createdAt: 'ct'\n      // })\n    }).addCase(addNewPost.rejected, (state, action) => {\n      state.createPostStatus = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","axios","postsService","POSTS_URL","initialState","posts","status","error","createPostStatus","fetchPosts","response","get","console","log","data","message","addNewPost","postData","thunkAPI","token","getState","users","user","createPost","toString","rejectWithValue","postsSlice","name","extraReducers","builder","addCase","pending","state","action","fulfilled","loadedPosts","payload","map","post","myMessage","Date","concat","rejected","push","unwrap","selectAllPosts","getPostsStatus","getPostsError","postAdded","actions","reducer"],"sources":["F:/PROJEKTY WWW/MERN_15/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from 'axios'\r\nimport postsService from \"./postsService\";\r\n\r\n\r\nconst POSTS_URL = 'http://localhost:5000/api/posts'\r\n\r\n\r\nconst initialState = {\r\n   posts: [],\r\n   status: 'idle',\r\n   error: null,\r\n   createPostStatus: 'idle'\r\n}\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    try {\r\n        const response = await axios.get(POSTS_URL)\r\n        console.log(response)\r\n        return response.data\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n    'posts/addNewPost',\r\n    async (postData, thunkAPI) => {\r\n      try {\r\n        const token = thunkAPI.getState().users.user.token\r\n        return await postsService.createPost(postData, token)\r\n      } catch (error) {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n      }\r\n    }\r\n  )\r\n\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    // reducers: {\r\n        // postAdded: {\r\n        //     reducer(state, action) {\r\n        //      \r\n        //         state.posts.concat([action.payload])\r\n        //         },\r\n        //     prepare(title, text, image, author) {\r\n        //         return {\r\n        //             payload: {\r\n        //             _id: nanoid(),\r\n        //             title,\r\n        //             text,\r\n        //             author,\r\n        //             image,\r\n        //             createdAt: new Date().toISOString()               \r\n        //             }\r\n        //         }\r\n        //     }\r\n        // },\r\n    // },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(fetchPosts.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchPosts.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'\r\n                \r\n                const loadedPosts = action.payload.map(post => {\r\n                    post.myMessage = `to moja wiadomość z ${new Date()}`\r\n                    return post\r\n                }\r\n                \r\n                )\r\n                state.posts = state.posts.concat(loadedPosts)\r\n            })\r\n            .addCase(fetchPosts.rejected, (state, action) => {\r\n                state.status = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n            .addCase(addNewPost.pending, (state, action) => {\r\n                state.createPostStatus = 'loading'\r\n                \r\n            })\r\n            .addCase(addNewPost.fulfilled, (state, action) => {\r\n                state.createPostStatus = 'succeed'\r\n                    const post = action.payload\r\n                    state.posts.push(post.unwrap())\r\n\r\n\r\n                    // console.log(action.payload)\r\n                    // state.posts.push({\r\n                    //     title: 'tytul',\r\n                    //     text: 'text',\r\n                    //     image: 'img',\r\n                    //     author: 'author',\r\n                    //     _id: 'id',\r\n                    //     createdAt: 'ct'\r\n                    // })\r\n            })\r\n            .addCase(addNewPost.rejected, (state, action) => {\r\n                state.createPostStatus = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n})\r\n\r\nexport const selectAllPosts = (state) => state.posts.posts\r\nexport const getPostsStatus = (state) => state.posts.status\r\nexport const getPostsError = (state) => state.posts.error\r\n\r\nexport const {postAdded} = postsSlice.actions\r\n\r\nexport default postsSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}