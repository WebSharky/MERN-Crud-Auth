{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axios.get(POSTS_URL);\n    return response.data;\n  } catch (error) {\n    return error.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId\n          }\n        };\n      }\n\n    }\n  } // extraReducers(builder) {\n  //     builder\n  //         .addCase(fetchPosts.pending, (state, action) => {\n  //             state.status = 'loading'\n  //         })\n  //         .addCase(fetchPosts.fullfilled, (state, action) => {\n  //             state.status = 'succeeded'\n  //             const loadedPosts = action.payload.map(post => {\n  //                 post.myMessage = `to moja wiadomość z ${new Date()}`\n  //                 return post\n  //             })\n  //             state.posts = state.posts.concat(loadedPosts)\n  //         })\n  //         .addCase(fetchPosts.rejected, (state, action) => {\n  //             state.status = 'failed'\n  //             state.error = action.error.message\n  //         })\n  // }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","message","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","selectAllPosts","getPostsStatus","getPostsError","actions"],"sources":["F:/PROJEKTY WWW/NEW_MERN_092022/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from 'axios'\r\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\r\n\r\nconst initialState = {\r\n   posts: [],\r\n   status: 'idle',\r\n   error: null\r\n}\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    try {\r\n        const response = await axios.get(POSTS_URL)\r\n        return response.data\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n})\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postAdded: {\r\n            reducer(state, action) {\r\n                state.push(action.payload)\r\n                },\r\n            prepare(title, content, userId) {\r\n                return {\r\n                    payload: {\r\n                    id: nanoid(),\r\n                    title,\r\n                    content,\r\n                    date: new Date().toISOString(),\r\n                    userId,\r\n                }\r\n                }\r\n            }\r\n        },\r\n    },\r\n    // extraReducers(builder) {\r\n    //     builder\r\n    //         .addCase(fetchPosts.pending, (state, action) => {\r\n    //             state.status = 'loading'\r\n    //         })\r\n    //         .addCase(fetchPosts.fullfilled, (state, action) => {\r\n    //             state.status = 'succeeded'\r\n    //             const loadedPosts = action.payload.map(post => {\r\n    //                 post.myMessage = `to moja wiadomość z ${new Date()}`\r\n    //                 return post\r\n    //             })\r\n    //             state.posts = state.posts.concat(loadedPosts)\r\n    //         })\r\n    //         .addCase(fetchPosts.rejected, (state, action) => {\r\n    //             state.status = 'failed'\r\n    //             state.error = action.error.message\r\n    //         })\r\n    // }\r\n})\r\n\r\nexport const selectAllPosts = (state) => state.posts.posts\r\nexport const getPostsStatus = (state) => state.posts.status\r\nexport const getPostsError = (state) => state.posts.error\r\n\r\nexport const {postAdded} = postsSlice.actions\r\n\r\nexport default postsSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,gBAA9B,QAAqD,kBAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,SAAS,GAAG,4CAAlB;AAEA,MAAMC,YAAY,GAAG;EAClBC,KAAK,EAAE,EADW;EAElBC,MAAM,EAAE,MAFU;EAGlBC,KAAK,EAAE;AAHW,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;EACvE,IAAI;IACA,MAAMQ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUP,SAAV,CAAvB;IACA,OAAOM,QAAQ,CAACE,IAAhB;EACH,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACZ,OAAOA,KAAK,CAACK,OAAb;EACH;AACJ,CAPyC,CAAnC;AASP,MAAMC,UAAU,GAAGd,WAAW,CAAC;EAC3Be,IAAI,EAAE,OADqB;EAE3BV,YAF2B;EAG3BW,QAAQ,EAAE;IACNC,SAAS,EAAE;MACPC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;QACnBD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;MACC,CAHE;;MAIPC,OAAO,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyB;QAC5B,OAAO;UACHJ,OAAO,EAAE;YACTK,EAAE,EAAE1B,MAAM,EADD;YAETuB,KAFS;YAGTC,OAHS;YAITG,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAJG;YAKTJ;UALS;QADN,CAAP;MASH;;IAdM;EADL,CAHiB,CAqB3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAtC2B,CAAD,CAA9B;AAyCA,OAAO,MAAMK,cAAc,GAAIZ,KAAD,IAAWA,KAAK,CAACb,KAAN,CAAYA,KAA9C;AACP,OAAO,MAAM0B,cAAc,GAAIb,KAAD,IAAWA,KAAK,CAACb,KAAN,CAAYC,MAA9C;AACP,OAAO,MAAM0B,aAAa,GAAId,KAAD,IAAWA,KAAK,CAACb,KAAN,CAAYE,KAA7C;AAEP,OAAO,MAAM;EAACS;AAAD,IAAcH,UAAU,CAACoB,OAA/B;AAEP,eAAepB,UAAU,CAACI,OAA1B"},"metadata":{},"sourceType":"module"}