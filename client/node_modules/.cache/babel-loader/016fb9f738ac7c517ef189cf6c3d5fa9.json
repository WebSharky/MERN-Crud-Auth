{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios'; // const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\n\nconst POSTS_URL = 'http://localhost:6000/api/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null,\n  createPostStatus: 'idle'\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axios.get(POSTS_URL);\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    return error.message;\n  }\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async postToSubmit => {\n  console.log('post to submit', postToSubmit);\n  console.log();\n\n  try {\n    const request = await axios.post(POSTS_URL, postToSubmit);\n    console.log(request.data);\n    return request.data;\n  } catch (error) {\n    return error.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, body, author) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            body,\n            author,\n            createdAt: new Date().toISOString()\n          }\n        };\n      }\n\n    }\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded'; // const loadedPosts = action.payload.map(post => {\n      //     post.myMessage = `to moja wiadomość z ${new Date()}`\n      //     return post\n      // }\n      // )\n      // state.posts = state.posts.concat(loadedPosts)\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.pending, (state, action) => {\n      state.createPostStatus = 'loading';\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      state.createPostStatus = 'succeed';\n      state.posts.push(action.payload);\n    }).addCase(addNewPost.rejected, (state, action) => {\n      state.createPostStatus = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","axios","POSTS_URL","initialState","posts","status","error","createPostStatus","fetchPosts","response","get","console","log","data","message","addNewPost","postToSubmit","request","post","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","body","author","id","createdAt","Date","toISOString","extraReducers","builder","addCase","pending","fulfilled","rejected","selectAllPosts","getPostsStatus","getPostsError","actions"],"sources":["F:/PROJEKTY WWW/MERN_15/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from 'axios'\r\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\r\nconst POSTS_URL = 'http://localhost:6000/api/posts'\r\n\r\nconst initialState = {\r\n   posts: [],\r\n   status: 'idle',\r\n   error: null,\r\n   createPostStatus: 'idle'\r\n}\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    try {\r\n        const response = await axios.get(POSTS_URL)\r\n        console.log(response)\r\n        return response.data\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (postToSubmit) => {\r\n    console.log('post to submit',postToSubmit)\r\n    console.log()\r\n    try {\r\n        \r\n        const request = await axios.post(POSTS_URL, postToSubmit)\r\n        console.log(request.data)\r\n        return request.data\r\n       \r\n        \r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postAdded: {\r\n            reducer(state, action) {\r\n                state.push(action.payload)\r\n                },\r\n            prepare(title, body, author) {\r\n                return {\r\n                    payload: {\r\n                    id: nanoid(),\r\n                    title,\r\n                    body,\r\n                    author,\r\n                    createdAt: new Date().toISOString()               \r\n                }\r\n                }\r\n            }\r\n        },\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(fetchPosts.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchPosts.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'\r\n                \r\n                // const loadedPosts = action.payload.map(post => {\r\n                //     post.myMessage = `to moja wiadomość z ${new Date()}`\r\n                //     return post\r\n                // }\r\n                \r\n                // )\r\n                // state.posts = state.posts.concat(loadedPosts)\r\n            })\r\n            .addCase(fetchPosts.rejected, (state, action) => {\r\n                state.status = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n            .addCase(addNewPost.pending, (state, action) => {\r\n                state.createPostStatus = 'loading'\r\n                \r\n            })\r\n            .addCase(addNewPost.fulfilled, (state, action) => {\r\n                state.createPostStatus = 'succeed'\r\n                state.posts.push(action.payload)\r\n            })\r\n            .addCase(addNewPost.rejected, (state, action) => {\r\n                state.createPostStatus = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n})\r\n\r\nexport const selectAllPosts = (state) => state.posts.posts\r\nexport const getPostsStatus = (state) => state.posts.status\r\nexport const getPostsError = (state) => state.posts.error\r\n\r\nexport const {postAdded} = postsSlice.actions\r\n\r\nexport default postsSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}